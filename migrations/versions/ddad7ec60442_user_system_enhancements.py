"""User system enhancements

Revision ID: ddad7ec60442
Revises: 4395905f3725
Create Date: 2025-03-18 13:07:18.908968

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ddad7ec60442'
down_revision = '4395905f3725'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('invite_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.Column('used_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['used_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    # SQLite doesn't support ALTER TABLE well, so we need to use simple column adds
    # These operations should work in SQLite
    op.add_column('user', sa.Column('email', sa.String(length=255), nullable=True))
    op.add_column('user', sa.Column('display_name', sa.String(length=100), nullable=True))
    op.add_column('user', sa.Column('role', sa.String(length=20), nullable=True))
    op.add_column('user', sa.Column('status', sa.String(length=20), nullable=True))
    op.add_column('user', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('last_login', sa.DateTime(), nullable=True))
    
    # Set default values for existing users
    conn = op.get_bind()
    conn.execute(sa.text("UPDATE user SET role = 'admin' WHERE admin = 1"))
    conn.execute(sa.text("UPDATE user SET role = 'user' WHERE admin = 0"))
    conn.execute(sa.text("UPDATE user SET status = 'active'"))
    
    # Skip the password type change for SQLite as it's not supported directly
    # Instead of: op.alter_column('user', 'password', type_=sa.String(length=255))
    # We'll just keep the existing column as is
    
    # Skip unique constraint for email as it might not work well with SQLite
    # Instead of: op.create_unique_constraint(None, 'user', ['email'])
    # We'll enforce uniqueness in the application code
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Skip constraint drop for SQLite
    # op.drop_constraint(None, 'user', type_='unique')
    
    # Skip password column type change for SQLite
    # op.alter_column('user', 'password', existing_type=sa.String(length=255), type_=sa.VARCHAR(length=100))
    
    # These operations should work in SQLite
    op.drop_column('user', 'last_login')
    op.drop_column('user', 'updated_at')
    op.drop_column('user', 'created_at')
    op.drop_column('user', 'status')
    op.drop_column('user', 'role')
    op.drop_column('user', 'display_name')
    op.drop_column('user', 'email')
    
    op.drop_table('invite_code')
    # ### end Alembic commands ###
